---
description: Tools and technical specs for the repo, use this when trying to get an understanding of the codebase
globs: 
alwaysApply: false
---

# Map Painter .io Technical Architecture Specification

## Overview

Map Painter .io remains a real-time multiplayer .io game built with Next.js 15 and React 19, but with added flexibility:  
- **Authentication:** Leverage [Clerk](mdc:https:/clerk.dev) to provide user authentication, enabling users to log in and get a personalized username. If they opt out, the system will assign a default username while still tracking key metrics.
- **Persistent Data Storage:** Use [Supabase](mdc:https:/supabase.com) to persist user data, game metrics, and websocket

## Technology Stack

- **Framework:** Next.js 15 (using the app router for full-stack capabilities)
- **Language:** TypeScript 5.4+
- **Frontend:**
  - **React:** React 19 (concurrent rendering, new hooks like `useTransition`)
  - **Rendering:** PixiJS 8.x (with WebGPU support)
  - **State Management:** Redux Toolkit 2.x + RTK Query
  - **Component Library:** Shadcn/ui (Tailwind-based components)
  - **Hosting:** Vercel
- **Backend:**
  - **WebSocket:** Supabase Realtime
  - **Data Storage:** Supabase
- **Authentication & Metrics:** **Clerk** for optional user authentication and tracking metrics
- **Styling:** Tailwind CSS 3.4+
- **Testing:**
  - **Unit:** Vitest
  - **E2E:** Playwright
- **Tooling:**
  - **Linting:** ESLint 9.x (flat config)
  - **Formatting:** Prettier 3.x
  - **CI/CD:** GitHub Actions with Husky and lint-staged

## Repository Structure

```
map-painter-io/
├── components.json
├── docs
│   ├── Plan Overview.md
│   └── Roadmap.md
├── e2e
│   ├── homepage.spec.ts
│   └── navigation.spec.ts
├── src/
│   ├── app/                  # Next.js app router and game routes
│   ├── components/           # Reusable UI & game-specific components
│   ├── config/              # Game rules and map loader configuration
│   ├── lib/                 
│   │   ├── auth/             # Clerk authentication integration
│   │   └── persistence/      # Supabase persistence integration
│   ├── server/              # Server-side logic (game instances, WebSocket server, storage adapter)
│   ├── store/               # Redux Toolkit slices and RTK Query API
│   ├── types/               # Shared TypeScript types
│   ├── public/              # Static assets (GeoJSON maps)
│   └── tests/               # Unit and integration tests
├── .github/                 # CI/CD workflows (GitHub Actions)
├── .husky/                  # Pre-commit hooks configuration
├── Config files             # ESLint, Prettier, Next.js, Tailwind, Vitest, etc.
└── README.md                # Project guide and high-level documentation
```

## Standards 

### Component Architecture Standards
- **Separation of Concerns:** UI components should be separated from logic utilities
- **Single Responsibility:** Each component should handle one specific aspect of functionality
- **Prop Interface Standards:** All components must have clearly defined prop interfaces
- **State Management:** Local component state for UI concerns, global state for shared data

### Performance Requirements
- **Large Dataset Handling:** All map components must implement optimizations for datasets >50 items
- **Spatial Indexing:** Use grid-based spatial indexing for point-in-polygon operations
- **Viewport Culling:** Render only visible elements when dealing with complex visualizations
- **Memory Management:** Implement proper cleanup in useEffect returns
- **Dependency Management:** Optimize React hook dependency arrays to prevent unnecessary rerenders
